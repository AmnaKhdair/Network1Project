/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project_net;

import com.placeholder.PlaceHolder;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import static java.lang.System.exit;
import java.lang.reflect.Array;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import static javax.swing.text.StyleConstants.FontFamily;
import javax.swing.text.StyledDocument;
import static project_net.TCPserver.listuser;
import static project_net.TCPserver.port;

/**
 *
 * @author ThinkPad
 */
public class ClientChat extends javax.swing.JFrame {

    PlaceHolder placeholder;
    int PortNumber_Local;
    int PortNumber_Server;
    DatagramSocket dataSocket;
    DatagramPacket dataPacket;
    DatagramSocket rec_dataSocket;
    DatagramSocket SendSocket;
    DatagramSocket ReceiveSocket;
    DatagramPacket rec_dataPacket;
    InetAddress serverIP;
    byte[] datasend;
    byte[] datareceive;
    static boolean connect = false;
    String username, test1;
    int j = 0;
    int p0 = 0;
    static BufferedReader read;
    static Socket socket;
    static String server_ip;
    String server_port;
    static int server_port_int;
    ArrayList<String> list_server = new ArrayList<String>();
    public static int y = 0;
    String filename;
    String filename_reliable;
    DatagramSocket reliableSocket;
    String recReiable = "";
    boolean flagSend;
    boolean flagRec;
    int countResend;
    int countErrors;
    /**
     * Creates new form ClientChat
     */
    public ClientChat() {
        super("ClientChat");
        initComponents();
        placeholder = new PlaceHolder(this.toSend, "enter text here");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        screenText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        toSend = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        statusText = new javax.swing.JTextField();
        usernameText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        localPort = new javax.swing.JTextField();
        locolIP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        TCPserverIP = new javax.swing.JTextField();
        TCPserverPort = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        RemortIP = new javax.swing.JTextField();
        RemotPort = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        onlineUsers = new javax.swing.JTextArea();
        selectUser = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 32767));
        chooseFile_unReliable = new javax.swing.JButton();
        filename_Label_unreliable = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        choosefile_reliable = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        countError = new javax.swing.JTextField();
        countRetra = new javax.swing.JTextField();
        filename_Label_reliable = new javax.swing.JLabel();
        errorRate = new javax.swing.JTextField();
        errprRateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JFramDemo");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(153, 153, 0));
        setForeground(new java.awt.Color(255, 204, 102));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 3));

        screenText.setColumns(20);
        screenText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        screenText.setRows(5);
        screenText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(screenText);

        toSend.setColumns(20);
        toSend.setRows(5);
        toSend.setToolTipText("");
        jScrollPane2.setViewportView(toSend);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Status:");

        statusText.setEditable(false);
        statusText.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        usernameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTextActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Username:");

        localPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localPortActionPerformed(evt);
            }
        });

        locolIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locolIPActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Local Port:");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Local IP:");

        sendButton.setBackground(new java.awt.Color(204, 204, 255));
        sendButton.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        sendButton.setForeground(new java.awt.Color(255, 0, 0));
        sendButton.setText("Send");
        sendButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        TCPserverPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TCPserverPortActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Online Users");

        loginButton.setBackground(new java.awt.Color(204, 204, 255));
        loginButton.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        loginButton.setForeground(new java.awt.Color(255, 0, 0));
        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("TCP Server IP:");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("TCP Server Port:");

        logoutButton.setBackground(new java.awt.Color(204, 204, 255));
        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setText("Remot IP:");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setText("Remot Port:");

        onlineUsers.setColumns(20);
        onlineUsers.setRows(5);
        onlineUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onlineMouse(evt);
            }
        });
        jScrollPane4.setViewportView(onlineUsers);

        selectUser.setBackground(new java.awt.Color(204, 204, 255));
        selectUser.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        selectUser.setForeground(new java.awt.Color(255, 0, 0));
        selectUser.setText("Select User To Chat");
        selectUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectUserActionPerformed(evt);
            }
        });

        filler1.setBackground(new java.awt.Color(255, 0, 0));

        chooseFile_unReliable.setBackground(new java.awt.Color(204, 204, 255));
        chooseFile_unReliable.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        chooseFile_unReliable.setForeground(new java.awt.Color(255, 0, 0));
        chooseFile_unReliable.setText("Choose File");
        chooseFile_unReliable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFile_unReliableActionPerformed(evt);
            }
        });

        filename_Label_unreliable.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        filename_Label_unreliable.setForeground(new java.awt.Color(255, 0, 0));

        jLabel5.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("Unreliable UDP:");

        choosefile_reliable.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        choosefile_reliable.setForeground(new java.awt.Color(255, 0, 0));
        choosefile_reliable.setText("Choose File");
        choosefile_reliable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosefile_reliableActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("Reilacle UDP:");

        jLabel9.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("Count of Retransmissions:");

        jLabel13.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setText("Count of errors:");

        filename_Label_reliable.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        filename_Label_reliable.setForeground(new java.awt.Color(255, 0, 0));

        errorRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorRateActionPerformed(evt);
            }
        });

        errprRateLabel.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        errprRateLabel.setForeground(new java.awt.Color(255, 0, 0));
        errprRateLabel.setText("Error Rate Perecentage:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(565, 565, 565)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TCPserverPort, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel3)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jLabel11)
                                                    .addComponent(jLabel12))
                                                .addGap(23, 23, 23))
                                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(locolIP, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(localPort, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(RemortIP, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(RemotPort, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(chooseFile_unReliable, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(TCPserverIP, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(531, 531, 531)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(errprRateLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(errorRate, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(choosefile_reliable, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(statusText)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel13))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(countRetra, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(countError, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filename_Label_unreliable, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabel10))
                            .addComponent(selectUser, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filename_Label_reliable, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TCPserverPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(locolIP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addGap(9, 9, 9)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(localPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(RemortIP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel11)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(RemotPort, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel12)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(TCPserverIP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(chooseFile_unReliable, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filename_Label_unreliable, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(errprRateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(countError, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel13))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(errorRate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(choosefile_reliable, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(countRetra, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectUser, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filename_Label_reliable, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFile_unReliableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFile_unReliableActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showDialog(this, "choose File");
         if(chooser.equals(null))
         { 
        File f = chooser.getSelectedFile();
        filename = f.getAbsolutePath();
        filename_Label_unreliable.setText("You Choose: " + filename);
         }
         else filename_Label_unreliable.setText("");
    }//GEN-LAST:event_chooseFile_unReliableActionPerformed

    private void selectUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectUserActionPerformed
        // TODO add your handling code here:
        String line = onlineUsers.getSelectedText();
        String[] remote = line.split(",");
        this.RemortIP.setText(remote[0]);
        this.RemotPort.setText(remote[1]);

        //System.out.print(remoteflack);
    }//GEN-LAST:event_selectUserActionPerformed

    private void onlineMouse(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onlineMouse
        // TODO add your handling code here:

        check();
    }//GEN-LAST:event_onlineMouse

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        //   System.out.print("hi");
        y = 9999999;
        if (connect == true) {
            check();
        }
        try {
            socket.close();
        } catch (IOException ex) {
            Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
        }
        exit(0);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        // TODO add your handling code here:
        TCPserver server = new TCPserver();
        server.setVisible(true);
        server.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        server.setAlwaysOnTop(true);
        if (connect == false) {
            username = this.usernameText.getText();
            this.usernameText.setEditable(false);
            server_ip = this.TCPserverIP.getText().trim();
            server_port = this.TCPserverPort.getText();
            server_port_int = Integer.parseInt(server_port);
        } else if (connect == true) {
            JOptionPane.showMessageDialog(this, "Your Already Connect ...");
        }

    }//GEN-LAST:event_loginButtonActionPerformed

    private void TCPserverPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TCPserverPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TCPserverPortActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        String msg;
        int flag;
        msg = this.usernameText.getText() + ":" + this.toSend.getText().trim();
        if (filename_Label_unreliable.getText().equals("") && filename_Label_reliable.getText().equals("")) {
            flag = 0;
            SendMessage(msg, flag);
            this.toSend.setText("");
        } else if (!filename_Label_unreliable.getText().equals("")) {
            flag = 1;
            filename_Label_unreliable.setText("");
            SendMessage(msg, flag);

        } else {
            flag = 2;

            SendMessage(msg, flag);

            //  sendFileReliable();
        }


    }//GEN-LAST:event_sendButtonActionPerformed

    private void locolIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locolIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locolIPActionPerformed

    private void localPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localPortActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_localPortActionPerformed

    private void usernameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameTextActionPerformed

    private void choosefile_reliableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choosefile_reliableActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showDialog(this, "choose File");
         if(!chooser.equals(null))
         {   File f = chooser.getSelectedFile();
       
           filename_reliable = f.getAbsolutePath();
        filename_Label_reliable.setText("You Choose: " + filename_reliable);
        }
        else  filename_Label_reliable.setText("");
    }//GEN-LAST:event_choosefile_reliableActionPerformed

    private void errorRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_errorRateActionPerformed
    public void check() {
        try {

            ClientChat.socket = new Socket(ClientChat.server_ip, ClientChat.server_port_int);
            InputStreamReader input = new InputStreamReader(ClientChat.socket.getInputStream());
            read = new BufferedReader(input);

            DataOutputStream out = new DataOutputStream(socket.getOutputStream());
            out.writeBytes(y + ":" + port + '\n');
            BufferedReader Din = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            String size = Din.readLine();

            int size_int = Integer.parseInt(size);
            for (int i = 0; i < size_int; i++) {
                String msg = Din.readLine();
                list_server.add(msg);
            }
            //    System.out.print( list_server.size()+"/");
            y++;

            if (list_server.size() > TCPserver.listuser.size()) {
                for (int i = TCPserver.listuser.size(); i < list_server.size(); i++) {
                    TCPserver.listuser.add(list_server.get(i));
                }
                ClientChat.onlineUsers.setText("");
                list_server.clear();
                //     System.out.print( list_server.size()+"/");
                write_list(TCPserver.listuser);
            } else if (list_server.size() < TCPserver.listuser.size()) {
                /*   for(int i=0;i<list_server.size();i++)
                      { TCPserver.listuser.clear();
                          TCPserver.listuser.add(list_server.get(i));}*/
                ClientChat.onlineUsers.setText("");
                write_list(list_server);
                //     write_list(TCPserver.listuser);

                list_server.clear();
            }

            list_server.clear();
            // write_list(TCPserver.listuser);

            //    write_list();
        } catch (IOException ex) {
            Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sendFileReliable() {
        try {

            /////////////////////////////
            flagSend = true;
            File f = new File(filename_reliable);
            String fname = f.getName();
            StringBuilder sb = new StringBuilder("\n");
            int x = 0;
            if (f.canRead()) {
                sb.append(f.getName() + " ,size" + f.length() + "bytes\n");
                x++;
            }

            File filetocopy = new File(f.getAbsolutePath());
            FileReader fileReader = new FileReader(filetocopy);
            BufferedReader bufferReader = new BufferedReader(fileReader);
            StringBuilder stringBuilder = new StringBuilder();
            String line;
            while ((line = bufferReader.readLine()) != null) {
                stringBuilder.append(line);
                stringBuilder.append("\n");
            }

            byte[] sentname0 = "hi".getBytes();

            DatagramPacket packet11 = new DatagramPacket(sentname0, sentname0.length, serverIP, PortNumber_Server);
            dataSocket.send(packet11);//send  any
          //  System.out.print("hi");

            byte[] sentname = f.getName().getBytes();

            DatagramPacket packet1 = new DatagramPacket(sentname, sentname.length, serverIP, PortNumber_Server);
            dataSocket.send(packet1);//send  name
           // System.out.print("" + f.getName());

            byte[] senttoserver = stringBuilder.toString().getBytes();

            if (senttoserver.length > 1000) {
                int size = senttoserver.length;
                float count = size / (float) 1000;
            //    System.out.print("" + count);
                double timeToSend = Math.ceil(count);
           //     System.out.print("  /" + timeToSend);
                String msgNumber = "" + timeToSend;
                byte[] number = msgNumber.getBytes();
                DatagramPacket packet0 = new DatagramPacket(number, number.length, serverIP, PortNumber_Server);
                dataSocket.send(packet0);//send number

                short seqNew, seqOld,temp;
                int y, z = 0;
                 seqNew = (short) 0;
                 seqOld = (short) 1;

                for (int i = 0; i < timeToSend; i++) {
                   
                    
                    y = 1000 * (i + 1);
                    z = y - size;
                    if (z < 1) {
                        y = 1000;
                    } else {
                        y = 1000 - z;
                    }

                    //end divide file 
                    Packet p = new Packet();
                 //   System.out.print( (y + (1000 * i)));
                    byte[] msg_bytes = Arrays.copyOfRange(senttoserver, i * 1000, (y + (1000 * i)));
                    p.addData(msg_bytes, msg_bytes.length, seqNew, 'D');
                    String error = this.errorRate.getText();
                    int errorInt = Integer.parseInt(error);
                    p.injectError(errorInt);
                    ByteBuffer tosendBuffer = p.toByteBuffer();
                    byte[] msg_data = tosendBuffer.array();
                    // System.out.print("\n"+new String(msg_data));
                    DatagramPacket packet2 = new DatagramPacket(msg_data, msg_data.length, serverIP, PortNumber_Server);
                    dataSocket.send(packet2);//send packet
                    p.countDown();
                 //   System.out.print("\n,");
                    while(true)
                    {
                        byte[] recByte = new byte[1000];
                        DatagramPacket recPacket = new DatagramPacket(recByte, recByte.length);
                        rec_dataSocket.setSoTimeout(5000);
                        try{
                        rec_dataSocket.receive(recPacket);
                   //     System.out.print("rec");
                        // System.out.print("/"+new String(recByte));
                        ByteBuffer recBuffer = ByteBuffer.wrap(recByte);
                        Packet pReceive = new Packet();
                        pReceive.extractPacketfromByteBuffer(recBuffer);
                        String isRecACK = "" + pReceive.getType();
                   //     System.out.print("/" + isRecACK+"\n");
                        byte ACK[] = pReceive.getData();
                        int checkSumCalc = pReceive.calc_checksum(ACK, ACK.length);
                        int checkSumAct = pReceive.getCheck();
                        boolean isNotCorrupt = (checkSumCalc == checkSumAct);
                   //     System.out.print("/"+pReceive.getseq());
                   //     System.out.print("/"+seqNew+",");
                        if (isRecACK.equals("A") && (pReceive.getseq() == seqNew) && (isNotCorrupt))
                        {
                            System.out.print("hi");
                             p.setRecACK(true);
                             temp = seqOld;
                             seqOld = seqNew;
                            seqNew = temp;
                             break;
                        }
                     
                    }
                        catch(SocketTimeoutException e){
                    //    System.out.print("3 \n");
                         p.setRecACK(true);
                        countResend++;
                         p.addData(msg_bytes, msg_bytes.length, seqNew, 'D');
                    String error2 = this.errorRate.getText();
                    int errorInt2 = Integer.parseInt(error2);
                    p.injectError(errorInt2);
                    ByteBuffer tosendBuffer2 = p.toByteBuffer();
                    byte[] msg_data2 = tosendBuffer2.array();
                    // System.out.print("\n"+new String(msg_data));
                    DatagramPacket packet3 = new DatagramPacket(msg_data2, msg_data2.length, serverIP, PortNumber_Server);
                    dataSocket.send(packet3);//send packet
                        
                         
                        }
               
                    }
                   


                }

            } else {
                double timeToSend = 1;
                String msgNumber = "" + timeToSend;
                byte[] number = msgNumber.getBytes();
                DatagramPacket packet0 = new DatagramPacket(number, number.length, serverIP, PortNumber_Server);
                dataSocket.send(packet0);
                Packet p = new Packet();
                
                    p.addData(senttoserver, senttoserver.length, (short)0, 'D');
                    String error = this.errorRate.getText();
                    int errorInt = Integer.parseInt(error);
                    p.injectError(errorInt);
                    ByteBuffer tosendBuffer = p.toByteBuffer();
                    byte[] msg_data = tosendBuffer.array();
                    // System.out.print("\n"+new String(msg_data));
                    DatagramPacket packet2 = new DatagramPacket(msg_data, msg_data.length, serverIP, PortNumber_Server);
                    dataSocket.send(packet2);//send packet

            }

        } catch (Exception ex) {
            Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
        }
     this.countRetra.setText(""+countResend);
    }

    public void receiveFileReliable() {

      //  System.out.print("w");

        short seqNew, seqOld, temp;
        seqOld = (short) 0;
        seqNew = (short) 1;
        byte recByte[] = new byte[6000];
        DatagramPacket recPacket = new DatagramPacket(recByte, 0, recByte.length);
        try {
            ////
            byte[] filename = new byte[6000];
            byte[] c = new byte[6000];
            byte[] d = new byte[6000];
            DatagramPacket name = new DatagramPacket(d, 0, d.length);
            rec_dataSocket.receive(name);//receive name
            String Name = new String(name.getData());
         //   System.out.print("name:" + Name.trim() + "\n");
            DatagramPacket Num = new DatagramPacket(filename, 0, filename.length);
            rec_dataSocket.receive(Num);//receive number
            InetAddress serverIPRec = InetAddress.getByName(this.RemortIP.getText());
            int PortNumberRec = Integer.parseInt(this.RemotPort.getText());

            String msgOfN = new String(Num.getData());
            float N = Float.parseFloat(msgOfN);
            System.out.print("n:" + msgOfN.trim() + "\n");
            
            String sReliable = "";

            for (int i = 0; i < N; i++) {
                 while( true)
                   { 
                byte[] b = new byte[1000];
                DatagramPacket packet = new DatagramPacket(recByte, 0, recByte.length);
                rec_dataSocket.receive(packet);//receive packet
                ByteBuffer recBuffer = ByteBuffer.wrap(recByte);
                Packet pReceive = new Packet();
                pReceive.extractPacketfromByteBuffer(recBuffer);
                String isRecData = "" + pReceive.getType();
                sReliable += new String(pReceive.getData());
                //chech the packet to send ACK 
                //System.out.print("\n"+new String(recByte));
                byte[] data = new byte[1000];
                data = pReceive.getData();
                int checkSumCalc = pReceive.calc_checksum(data, data.length);
                int checkSumAct = pReceive.getCheck();
                String msg = new String(pReceive.getData());
                     if ((isRecData.equals("D") && (checkSumCalc == checkSumAct)) && (seqOld == pReceive.getseq())) {
                  //  System.out.print("q");
                    String ACKsend = "" + seqOld;
                    Packet p = new Packet();
                    byte[] msg_bytes = ACKsend.getBytes();
                    p.addData(msg_bytes, msg_bytes.length, seqOld, 'A');
                    ByteBuffer tosendBuffer = p.toByteBuffer();
                    byte[] msg_data = tosendBuffer.array();
                    DatagramPacket sendPacket = new DatagramPacket(msg_data, msg_data.length, serverIPRec, PortNumberRec);
                    dataSocket.send(sendPacket);
                    dataSocket.send(sendPacket);
                    break;
                   
                } else 
                {
                    countErrors++;
                //    System.out.print("2");
                    Packet p = new Packet();
                    String ACKsend = "" + seqNew;
                    byte[] msg_bytes =  ACKsend.getBytes();
                    p.addData(msg_bytes, msg_bytes.length, seqNew, 'A');
                    ByteBuffer tosendBuffer = p.toByteBuffer();
                    byte[] msg_data = tosendBuffer.array();
                 //   System.out.print(" before ");
                    DatagramPacket sendPacket0 = new DatagramPacket(msg_data, msg_data.length, serverIPRec, PortNumberRec);
                    dataSocket.send(sendPacket0);
                    dataSocket.send(sendPacket0);
                   // System.out.print(" after ");
                }}
                   temp = seqOld;
                    seqOld = seqNew;
                    seqNew = temp;
            }
            //  System.out.print(sReliable);
            String message = "";
            this.screenText.append("You receive a file: [" + Name.trim() + "] from sender and it store on Desktop" + "\n");
            String t = "Rem:" + message.trim();
            color(t);
            String fname = new String(name.getData()).trim();
            fname = "C:\\Users\\ThinkPad\\Desktop\\" + fname;
            String filedata = new String(sReliable).trim();
            PrintWriter pw = new PrintWriter(fname);
            pw.println(filedata);
            pw.close();
          //  System.out.print("close");

        } catch (Exception ex) {
            Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.countError.setText(""+countErrors);
    }

    public void write_list(ArrayList<String> list1) {

        String[] users = new String[(list1.size())];
        list1.toArray(users);
        for (String user : users) {
            ClientChat.onlineUsers.append(user + "\n");
        }
    }

    public void receiveMessage() {

        String message = "";
        try {
            String localport, remoteport = "", remotip;

            while (true) {
                if ((!localPort.getText().isEmpty())) {
                    break;
                }

            }

            localport = this.localPort.getText();
            PortNumber_Local = Integer.valueOf(localport);
            rec_dataSocket = new DatagramSocket(PortNumber_Local);
            while (true) {

                datareceive = new byte[6000];
                rec_dataPacket = new DatagramPacket(datareceive, 0, datareceive.length);
                rec_dataSocket.receive(rec_dataPacket);

                datareceive = rec_dataPacket.getData();
                String messageFlag = "";
                messageFlag = new String(datareceive);
                //chat
                if (messageFlag.trim().equals("chat")) {
                    datareceive = new byte[6000];
                    rec_dataPacket = new DatagramPacket(datareceive, 0, datareceive.length);
                    rec_dataSocket.receive(rec_dataPacket);

                    datareceive = rec_dataPacket.getData();
                    message = new String(datareceive);
                    ///
                    this.screenText.append(message.trim() + "\n");
                    String t = "Rem:" + message.trim();
                    color(t);

                    message = "";

                    this.statusText.setText("Received From:IP=" + this.RemortIP.getText() + ", Port=" + this.RemotPort.getText());
                } //unreliable
                else if (messageFlag.trim().equals("fileUnReliable")) {
                    System.out.print("hi");
                    byte[] filename = new byte[1000];
                    byte[] c = new byte[1000];
                    DatagramPacket name = new DatagramPacket(filename, filename.length);
                    rec_dataSocket.receive(name);
                    String Name = new String(name.getData());

                    DatagramPacket packet = new DatagramPacket(c, c.length);
                    rec_dataSocket.receive(packet);
                    String msgOfN = new String(packet.getData());
                    float N = Float.parseFloat(msgOfN);
                    String s = "";
                    System.out.print(new String(packet.getData()));
                    for (int i = 0; i < N; i++) {
                        byte[] b = new byte[1000];
                        DatagramPacket packet1 = new DatagramPacket(b, b.length);
                        rec_dataSocket.receive(packet1);
                        s += new String(packet1.getData());

                    }

                    this.screenText.append("You receive a file: [" + Name.trim() + "] from sender and it store on Desktop" + "\n");
                    String t = "Rem:" + message.trim();
                    color(t);

                    String fname = new String(name.getData()).trim();

                    fname = "C:\\Users\\ThinkPad\\Desktop\\" + fname;

                    String filedata = new String(s).trim();
                    PrintWriter pw = new PrintWriter(fname);
                    pw.println(filedata);
                    pw.close();
                } //reliable
                else {
                    if (!flagSend == true) {
                        receiveFileReliable();
                    }
                       break;
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void SendMessage(String message, int flag) {
        if (flag == 0) {
            try {

                dataSocket = new DatagramSocket();
                String serIP, serverPort;
                serIP = this.RemortIP.getText();
                serverIP = InetAddress.getByName(serIP);
                ////
                byte[] send0 = "chat".getBytes();
                serverPort = this.RemotPort.getText();
                PortNumber_Server = Integer.parseInt(serverPort);
                dataPacket = new DatagramPacket(send0, send0.length, serverIP, PortNumber_Server);
                dataSocket.send(dataPacket);

                ////
                datasend = message.getBytes();
                serverPort = this.RemotPort.getText();
                PortNumber_Server = Integer.parseInt(serverPort);
                dataPacket = new DatagramPacket(datasend, datasend.length, serverIP, PortNumber_Server);
                dataSocket.send(dataPacket);
                this.screenText.append("Me:" + this.toSend.getText().trim() + "\n");
                String t = "Me:" + message.trim();
                color(t);
                test1 = this.usernameText.getText();

            } catch (Exception ex) {
                Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (flag == 1) {
            try {
                String serIP, serverPort;
                serIP = this.RemortIP.getText();
                serverIP = InetAddress.getByName(serIP);
                datasend = "fileUnReliable".getBytes();
                serverPort = this.RemotPort.getText();
                PortNumber_Server = Integer.parseInt(serverPort);
                //
                dataPacket = new DatagramPacket(datasend, datasend.length, serverIP, PortNumber_Server);
                dataSocket.send(dataPacket);
                //

                File f1 = new File(filename);
                String fname = f1.getName();
                StringBuilder sb = new StringBuilder("\n");
                int x = 0;
                if (f1.canRead()) {
                    sb.append(f1.getName() + " ,size" + f1.length() + "bytes\n");
                    x++;
                }

                File filetocopy = new File(f1.getAbsolutePath());
                System.out.print(f1.getAbsolutePath());

                FileReader fileReader = new FileReader(filetocopy);
                BufferedReader bufferReader = new BufferedReader(fileReader);
                StringBuilder stringBuilder = new StringBuilder();
                String line;
                while ((line = bufferReader.readLine()) != null) {
                    stringBuilder.append(line);
                    stringBuilder.append("\n");
                }
                byte[] sentname = f1.getName().getBytes();
                DatagramPacket packet1 = new DatagramPacket(sentname, sentname.length, serverIP, PortNumber_Server);
                dataSocket.send(packet1);

                byte[] senttoserver = stringBuilder.toString().getBytes();

                if (senttoserver.length > 1000) {
                    int size = senttoserver.length;
                    float count = size / (float) 1000;
                    System.out.print("" + count);
                    double timeToSend = Math.ceil(count);
                    System.out.print("  /" + timeToSend);
                    String msgNumber = "" + timeToSend;
                    byte[] number = msgNumber.getBytes();
                    DatagramPacket packet0 = new DatagramPacket(number, number.length, serverIP, PortNumber_Server);
                    dataSocket.send(packet0);
                    int y, z = 0;
                    for (int i = 0; i < timeToSend; i++) {
                        y = 1000 * (i + 1);
                        z = y - size;
                        if (z < 1) {
                            y = 1000;
                        } else {
                            y = 1000 - z;
                        }

                        DatagramPacket packet2 = new DatagramPacket(senttoserver, i * 1000, y, serverIP, PortNumber_Server);
                        dataSocket.send(packet2);

                    }

                } else {
                    double timeToSend = 1;
                    String msgNumber = "" + timeToSend;
                    byte[] number = msgNumber.getBytes();
                    DatagramPacket packet0 = new DatagramPacket(number, number.length, serverIP, PortNumber_Server);
                    dataSocket.send(packet0);
                    DatagramPacket packet2 = new DatagramPacket(senttoserver, senttoserver.length, serverIP, PortNumber_Server);
                    dataSocket.send(packet2);

                }
            } catch (Exception ex) {
                Logger.getLogger(ClientChat.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            filename_Label_reliable.setText("");
            sendFileReliable();

        }
    }

    public void color(String msg) throws BadLocationException {

        Highlighter highlighter = this.screenText.getHighlighter();

        int p1 = this.screenText.getLineEndOffset(j) - 1;

        if (msg.startsWith("Me")) {
            HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.red);

            highlighter.addHighlight(p0, p1, painter);

        } else {
            HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.blue);

            highlighter.addHighlight(p0, p1, painter);
        }
        j++;

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                thread chat1 = new thread();
                chat1.start();

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField RemortIP;
    public javax.swing.JTextField RemotPort;
    public javax.swing.JTextField TCPserverIP;
    public javax.swing.JTextField TCPserverPort;
    private javax.swing.JButton chooseFile_unReliable;
    private javax.swing.JButton choosefile_reliable;
    private javax.swing.JTextField countError;
    private javax.swing.JTextField countRetra;
    private javax.swing.JTextField errorRate;
    private javax.swing.JLabel errprRateLabel;
    private javax.swing.JLabel filename_Label_reliable;
    private javax.swing.JLabel filename_Label_unreliable;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    public static javax.swing.JTextField localPort;
    public static javax.swing.JTextField locolIP;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton logoutButton;
    public static javax.swing.JTextArea onlineUsers;
    public javax.swing.JTextArea screenText;
    public javax.swing.JButton selectUser;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField statusText;
    public javax.swing.JTextArea toSend;
    public javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables

}
